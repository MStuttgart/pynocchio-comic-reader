# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window_view.ui'
##
## Created by: Qt User Interface Compiler version 6.8.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QFrame, QHBoxLayout, QLabel,
    QLayout, QMainWindow, QMenu, QMenuBar,
    QSizePolicy, QTabWidget, QToolBar, QWidget)

from .custom_widgets.qscroll_area_viewer import QScrollAreaViewer
from .custom_widgets.status_bar import StatusBar
from . import main_window_view_rc

class Ui_MainWindowView(object):
    def setupUi(self, MainWindowView):
        if not MainWindowView.objectName():
            MainWindowView.setObjectName(u"MainWindowView")
        MainWindowView.resize(1048, 537)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindowView.sizePolicy().hasHeightForWidth())
        MainWindowView.setSizePolicy(sizePolicy)
        MainWindowView.setBaseSize(QSize(0, 3))
        MainWindowView.setFocusPolicy(Qt.WheelFocus)
        icon = QIcon()
        icon.addFile(u":/others/pynocchio.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        MainWindowView.setWindowIcon(icon)
        MainWindowView.setIconSize(QSize(22, 22))
        MainWindowView.setToolButtonStyle(Qt.ToolButtonIconOnly)
        MainWindowView.setAnimated(True)
        MainWindowView.setDocumentMode(False)
        MainWindowView.setTabShape(QTabWidget.Rounded)
        MainWindowView.setDockNestingEnabled(False)
        MainWindowView.setUnifiedTitleAndToolBarOnMac(True)
        self.action_about = QAction(MainWindowView)
        self.action_about.setObjectName(u"action_about")
        icon1 = QIcon()
        icon1.addFile(u":/icons/icons/help-info.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_about.setIcon(icon1)
        self.action_about_qt = QAction(MainWindowView)
        self.action_about_qt.setObjectName(u"action_about_qt")
        self.action_exit = QAction(MainWindowView)
        self.action_exit.setObjectName(u"action_exit")
        icon2 = QIcon()
        icon2.addFile(u":/icons/icons/system-shutdown.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_exit.setIcon(icon2)
        self.action_next_page = QAction(MainWindowView)
        self.action_next_page.setObjectName(u"action_next_page")
        self.action_next_page.setEnabled(False)
        icon3 = QIcon()
        icon3.addFile(u":/icons/icons/go-next.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_next_page.setIcon(icon3)
        self.action_next_page.setShortcutContext(Qt.WindowShortcut)
        self.action_next_page.setVisible(True)
        self.action_next_page.setPriority(QAction.HighPriority)
        self.action_previous_page = QAction(MainWindowView)
        self.action_previous_page.setObjectName(u"action_previous_page")
        self.action_previous_page.setEnabled(False)
        icon4 = QIcon()
        icon4.addFile(u":/icons/icons/go-previous.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_previous_page.setIcon(icon4)
        self.action_previous_page.setShortcutContext(Qt.WindowShortcut)
        self.action_previous_page.setVisible(True)
        self.action_first_page = QAction(MainWindowView)
        self.action_first_page.setObjectName(u"action_first_page")
        self.action_first_page.setEnabled(False)
        icon5 = QIcon()
        icon5.addFile(u":/icons/icons/go-first.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_first_page.setIcon(icon5)
        self.action_first_page.setShortcutContext(Qt.WindowShortcut)
        self.action_last_page = QAction(MainWindowView)
        self.action_last_page.setObjectName(u"action_last_page")
        self.action_last_page.setEnabled(False)
        icon6 = QIcon()
        icon6.addFile(u":/icons/icons/go-last.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_last_page.setIcon(icon6)
        self.action_last_page.setShortcutContext(Qt.WindowShortcut)
        self.action_rotate_left = QAction(MainWindowView)
        self.action_rotate_left.setObjectName(u"action_rotate_left")
        self.action_rotate_left.setCheckable(False)
        self.action_rotate_left.setEnabled(False)
        icon7 = QIcon()
        icon7.addFile(u":/icons/icons/object-rotate-left.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_rotate_left.setIcon(icon7)
        self.action_rotate_left.setShortcutContext(Qt.WidgetShortcut)
        self.action_rotate_right = QAction(MainWindowView)
        self.action_rotate_right.setObjectName(u"action_rotate_right")
        self.action_rotate_right.setEnabled(False)
        icon8 = QIcon()
        icon8.addFile(u":/icons/icons/object-rotate-right.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_rotate_right.setIcon(icon8)
        self.action_rotate_right.setShortcutContext(Qt.WidgetShortcut)
        self.action_horizontal_fit = QAction(MainWindowView)
        self.action_horizontal_fit.setObjectName(u"action_horizontal_fit")
        self.action_horizontal_fit.setCheckable(True)
        self.action_horizontal_fit.setChecked(False)
        self.action_horizontal_fit.setEnabled(False)
        icon9 = QIcon()
        icon9.addFile(u":/icons/icons/horizontal-fit.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_horizontal_fit.setIcon(icon9)
        self.action_horizontal_fit.setVisible(True)
        self.action_fullscreen = QAction(MainWindowView)
        self.action_fullscreen.setObjectName(u"action_fullscreen")
        self.action_fullscreen.setCheckable(False)
        self.action_fullscreen.setEnabled(False)
        icon10 = QIcon()
        icon10.addFile(u":/icons/icons/fullscreen.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_fullscreen.setIcon(icon10)
        self.action_fullscreen.setShortcutContext(Qt.WidgetShortcut)
        self.action_fullscreen.setIconVisibleInMenu(True)
        self.action_go_to_page = QAction(MainWindowView)
        self.action_go_to_page.setObjectName(u"action_go_to_page")
        self.action_go_to_page.setEnabled(False)
        icon11 = QIcon()
        icon11.addFile(u":/icons/icons/edit-find.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_go_to_page.setIcon(icon11)
        self.action_original_fit = QAction(MainWindowView)
        self.action_original_fit.setObjectName(u"action_original_fit")
        self.action_original_fit.setCheckable(True)
        self.action_original_fit.setChecked(True)
        self.action_original_fit.setEnabled(False)
        icon12 = QIcon()
        icon12.addFile(u":/icons/icons/original-fit.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_original_fit.setIcon(icon12)
        self.action_original_fit.setShortcutContext(Qt.ApplicationShortcut)
        self.action_original_fit.setVisible(True)
        self.action_show_statusbar = QAction(MainWindowView)
        self.action_show_statusbar.setObjectName(u"action_show_statusbar")
        self.action_show_statusbar.setCheckable(True)
        self.action_show_statusbar.setChecked(True)
        self.action_add_bookmark = QAction(MainWindowView)
        self.action_add_bookmark.setObjectName(u"action_add_bookmark")
        self.action_add_bookmark.setEnabled(False)
        icon13 = QIcon()
        icon13.addFile(u":/icons/icons/bookmark-new.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_add_bookmark.setIcon(icon13)
        self.action_add_bookmark.setVisible(True)
        self.action_remove_bookmark = QAction(MainWindowView)
        self.action_remove_bookmark.setObjectName(u"action_remove_bookmark")
        self.action_remove_bookmark.setEnabled(False)
        icon14 = QIcon()
        icon14.addFile(u":/icons/icons/edit-delete.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_remove_bookmark.setIcon(icon14)
        self.action_remove_bookmark.setVisible(False)
        self.action_remove_bookmark.setIconVisibleInMenu(True)
        self.action_bookmark_manager = QAction(MainWindowView)
        self.action_bookmark_manager.setObjectName(u"action_bookmark_manager")
        self.action_bookmark_manager.setEnabled(True)
        icon15 = QIcon()
        icon15.addFile(u":/icons/icons/system-file-manager2.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_bookmark_manager.setIcon(icon15)
        self.action_open_folder = QAction(MainWindowView)
        self.action_open_folder.setObjectName(u"action_open_folder")
        icon16 = QIcon()
        icon16.addFile(u":/icons/icons/document-open.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_folder.setIcon(icon16)
        self.action_open_folder.setVisible(True)
        self.action_open_folder.setMenuRole(QAction.TextHeuristicRole)
        self.action_open_folder.setIconVisibleInMenu(True)
        self.action_next_comic = QAction(MainWindowView)
        self.action_next_comic.setObjectName(u"action_next_comic")
        self.action_next_comic.setEnabled(False)
        icon17 = QIcon()
        icon17.addFile(u":/icons/icons/media-skip-forward.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_next_comic.setIcon(icon17)
        self.action_next_comic.setShortcutContext(Qt.WindowShortcut)
        self.action_previous_comic = QAction(MainWindowView)
        self.action_previous_comic.setObjectName(u"action_previous_comic")
        self.action_previous_comic.setEnabled(False)
        icon18 = QIcon()
        icon18.addFile(u":/icons/icons/media-skip-backward.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_previous_comic.setIcon(icon18)
        self.action_previous_comic.setShortcutContext(Qt.WindowShortcut)
        self.action_preference_dialog = QAction(MainWindowView)
        self.action_preference_dialog.setObjectName(u"action_preference_dialog")
        icon19 = QIcon()
        icon19.addFile(u":/icons/elementary3-icon-theme/actions/48/document-properties.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_preference_dialog.setIcon(icon19)
        self.action_preference_dialog.setVisible(False)
        self.action_vertical_fit = QAction(MainWindowView)
        self.action_vertical_fit.setObjectName(u"action_vertical_fit")
        self.action_vertical_fit.setCheckable(True)
        self.action_vertical_fit.setChecked(False)
        self.action_vertical_fit.setEnabled(False)
        icon20 = QIcon()
        icon20.addFile(u":/icons/icons/vertical-fit.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_vertical_fit.setIcon(icon20)
        self.action_vertical_fit.setAutoRepeat(True)
        self.action_vertical_fit.setVisible(True)
        self.action_best_fit = QAction(MainWindowView)
        self.action_best_fit.setObjectName(u"action_best_fit")
        self.action_best_fit.setCheckable(True)
        self.action_best_fit.setChecked(False)
        self.action_best_fit.setEnabled(False)
        icon21 = QIcon()
        icon21.addFile(u":/icons/icons/best-fit.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_best_fit.setIcon(icon21)
        self.action_best_fit.setVisible(True)
        self.action_page_fit = QAction(MainWindowView)
        self.action_page_fit.setObjectName(u"action_page_fit")
        self.action_page_fit.setCheckable(True)
        self.action_page_fit.setChecked(False)
        self.action_page_fit.setEnabled(False)
        icon22 = QIcon()
        icon22.addFile(u":/icons/icons/page-fit.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_page_fit.setIcon(icon22)
        self.action_page_fit.setVisible(True)
        self.action_save_image = QAction(MainWindowView)
        self.action_save_image.setObjectName(u"action_save_image")
        self.action_save_image.setEnabled(True)
        self.action_open_file = QAction(MainWindowView)
        self.action_open_file.setObjectName(u"action_open_file")
        icon23 = QIcon()
        icon23.addFile(u":/icons/icons/archive-extract.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_file.setIcon(icon23)
        font = QFont()
        self.action_open_file.setFont(font)
        self.actionRecent_file_1 = QAction(MainWindowView)
        self.actionRecent_file_1.setObjectName(u"actionRecent_file_1")
        self.actionRecent_file_1.setText(u"&recent_file_1")
        self.actionRecent_file_1.setIconText(u"recent_file_1")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_1.setToolTip(u"recent_file_1")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_1.setVisible(False)
        self.actionRecent_file_2 = QAction(MainWindowView)
        self.actionRecent_file_2.setObjectName(u"actionRecent_file_2")
        self.actionRecent_file_2.setText(u"recent_&file_2")
        self.actionRecent_file_2.setIconText(u"recent_file_2")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_2.setToolTip(u"recent_file_2")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_2.setVisible(False)
        self.actionRecent_file_3 = QAction(MainWindowView)
        self.actionRecent_file_3.setObjectName(u"actionRecent_file_3")
        self.actionRecent_file_3.setText(u"recent_file_&3")
        self.actionRecent_file_3.setIconText(u"recent_file_3")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_3.setToolTip(u"recent_file_3")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_3.setVisible(False)
        self.actionRecent_file_4 = QAction(MainWindowView)
        self.actionRecent_file_4.setObjectName(u"actionRecent_file_4")
        self.actionRecent_file_4.setText(u"recent_file_&4")
        self.actionRecent_file_4.setIconText(u"recent_file_4")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_4.setToolTip(u"recent_file_4")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_4.setVisible(False)
        self.actionRecent_file_5 = QAction(MainWindowView)
        self.actionRecent_file_5.setObjectName(u"actionRecent_file_5")
        self.actionRecent_file_5.setText(u"recent_file_&5")
        self.actionRecent_file_5.setIconText(u"recent_file_5")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_5.setToolTip(u"recent_file_5")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_5.setVisible(False)
        self.actionRecent_file_6 = QAction(MainWindowView)
        self.actionRecent_file_6.setObjectName(u"actionRecent_file_6")
        self.actionRecent_file_6.setText(u"recent_file_&6")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_6.setToolTip(u"recent_file_6")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_6.setVisible(False)
        self.actionRecent_file_7 = QAction(MainWindowView)
        self.actionRecent_file_7.setObjectName(u"actionRecent_file_7")
        self.actionRecent_file_7.setText(u"recent_file_&7")
        self.actionRecent_file_7.setIconText(u"recent_file_7")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_7.setToolTip(u"recent_file_7")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_7.setVisible(False)
        self.actionRecent_file_8 = QAction(MainWindowView)
        self.actionRecent_file_8.setObjectName(u"actionRecent_file_8")
        self.actionRecent_file_8.setText(u"recent_file_&8")
        self.actionRecent_file_8.setIconText(u"recent_file_8")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_8.setToolTip(u"recent_file_8")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_8.setVisible(False)
        self.actionRecent_file_9 = QAction(MainWindowView)
        self.actionRecent_file_9.setObjectName(u"actionRecent_file_9")
        self.actionRecent_file_9.setText(u"recent_file_&9")
        self.actionRecent_file_9.setIconText(u"recent_file_9")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_9.setToolTip(u"recent_file_9")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_9.setVisible(False)
        self.actionRecent_file_10 = QAction(MainWindowView)
        self.actionRecent_file_10.setObjectName(u"actionRecent_file_10")
        self.actionRecent_file_10.setText(u"recent_file_&10")
        self.actionRecent_file_10.setIconText(u"recent_file_10")
#if QT_CONFIG(tooltip)
        self.actionRecent_file_10.setToolTip(u"recent_file_10")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_file_10.setVisible(False)
        self.actionRecent_bookmark_1 = QAction(MainWindowView)
        self.actionRecent_bookmark_1.setObjectName(u"actionRecent_bookmark_1")
        self.actionRecent_bookmark_1.setText(u"&recent_bookmark_1")
        self.actionRecent_bookmark_1.setIconText(u"recent_bookmark_1")
#if QT_CONFIG(tooltip)
        self.actionRecent_bookmark_1.setToolTip(u"recent_bookmark_1")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_bookmark_1.setVisible(False)
        self.actionRecent_bookmark_2 = QAction(MainWindowView)
        self.actionRecent_bookmark_2.setObjectName(u"actionRecent_bookmark_2")
        self.actionRecent_bookmark_2.setText(u"recent_&bookmark_2")
        self.actionRecent_bookmark_2.setIconText(u"recent_bookmark_2")
#if QT_CONFIG(tooltip)
        self.actionRecent_bookmark_2.setToolTip(u"recent_bookmark_2")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_bookmark_2.setVisible(False)
        self.actionRecent_bookmark_3 = QAction(MainWindowView)
        self.actionRecent_bookmark_3.setObjectName(u"actionRecent_bookmark_3")
        self.actionRecent_bookmark_3.setText(u"recent_bookmark_&3")
        self.actionRecent_bookmark_3.setIconText(u"recent_bookmark_3")
#if QT_CONFIG(tooltip)
        self.actionRecent_bookmark_3.setToolTip(u"recent_bookmark_3")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_bookmark_3.setVisible(False)
        self.actionRecent_bookmark_4 = QAction(MainWindowView)
        self.actionRecent_bookmark_4.setObjectName(u"actionRecent_bookmark_4")
        self.actionRecent_bookmark_4.setText(u"recent_bookmark_&4")
#if QT_CONFIG(tooltip)
        self.actionRecent_bookmark_4.setToolTip(u"recent_bookmark_4")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_bookmark_4.setVisible(False)
        self.actionRecent_bookmark_5 = QAction(MainWindowView)
        self.actionRecent_bookmark_5.setObjectName(u"actionRecent_bookmark_5")
        self.actionRecent_bookmark_5.setText(u"recent_bookmark_&5")
        self.actionRecent_bookmark_5.setIconText(u"recent_bookmark_5")
#if QT_CONFIG(tooltip)
        self.actionRecent_bookmark_5.setToolTip(u"recent_bookmark_5")
#endif // QT_CONFIG(tooltip)
        self.actionRecent_bookmark_5.setVisible(False)
        self.action_show_toolbar = QAction(MainWindowView)
        self.action_show_toolbar.setObjectName(u"action_show_toolbar")
        self.action_show_toolbar.setCheckable(True)
        self.action_show_toolbar.setChecked(True)
        self.action_double_page_mode = QAction(MainWindowView)
        self.action_double_page_mode.setObjectName(u"action_double_page_mode")
        self.action_double_page_mode.setCheckable(True)
        self.action_double_page_mode.setEnabled(False)
        icon24 = QIcon()
        icon24.addFile(u":/icons/icons/distribute-horizontal-margin.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_double_page_mode.setIcon(icon24)
        self.action_double_page_mode.setIconVisibleInMenu(True)
        self.action_manga_mode = QAction(MainWindowView)
        self.action_manga_mode.setObjectName(u"action_manga_mode")
        self.action_manga_mode.setCheckable(True)
        self.action_manga_mode.setEnabled(False)
        self.action_page_across_files = QAction(MainWindowView)
        self.action_page_across_files.setObjectName(u"action_page_across_files")
        self.action_page_across_files.setCheckable(True)
        self.action_page_across_files.setChecked(True)
        self.action_show_thumbnails = QAction(MainWindowView)
        self.action_show_thumbnails.setObjectName(u"action_show_thumbnails")
        self.action_show_thumbnails.setCheckable(True)
        self.action_show_thumbnails.setChecked(True)
        self.action_dark_style = QAction(MainWindowView)
        self.action_dark_style.setObjectName(u"action_dark_style")
        self.action_dark_style.setCheckable(True)
        self.action_dark_style.setChecked(True)
        self.action_shrink_only = QAction(MainWindowView)
        self.action_shrink_only.setObjectName(u"action_shrink_only")
        self.action_shrink_only.setCheckable(True)
        self.action_shrink_only.setChecked(False)
        self.central_widget = QWidget(MainWindowView)
        self.central_widget.setObjectName(u"central_widget")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.central_widget.sizePolicy().hasHeightForWidth())
        self.central_widget.setSizePolicy(sizePolicy1)
        self.central_widget.setAutoFillBackground(False)
        self.horizontalLayout = QHBoxLayout(self.central_widget)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.qscroll_area_viewer = QScrollAreaViewer(self.central_widget)
        self.qscroll_area_viewer.setObjectName(u"qscroll_area_viewer")
        sizePolicy.setHeightForWidth(self.qscroll_area_viewer.sizePolicy().hasHeightForWidth())
        self.qscroll_area_viewer.setSizePolicy(sizePolicy)
        self.qscroll_area_viewer.setFocusPolicy(Qt.NoFocus)
        self.qscroll_area_viewer.setLayoutDirection(Qt.LeftToRight)
        self.qscroll_area_viewer.setAutoFillBackground(False)
        self.qscroll_area_viewer.setFrameShape(QFrame.HLine)
        self.qscroll_area_viewer.setFrameShadow(QFrame.Plain)
        self.qscroll_area_viewer.setLineWidth(0)
        self.qscroll_area_viewer.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.qscroll_area_viewer.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.qscroll_area_viewer.setWidgetResizable(True)
        self.qscroll_area_viewer.setAlignment(Qt.AlignCenter)
        self.scroll_area_widget_contents = QWidget()
        self.scroll_area_widget_contents.setObjectName(u"scroll_area_widget_contents")
        self.scroll_area_widget_contents.setGeometry(QRect(0, 0, 1048, 454))
        sizePolicy.setHeightForWidth(self.scroll_area_widget_contents.sizePolicy().hasHeightForWidth())
        self.scroll_area_widget_contents.setSizePolicy(sizePolicy)
        self.scroll_area_widget_contents.setAutoFillBackground(True)
        self.scroll_area_widget_contents.setStyleSheet(u"")
        self.horizontalLayout_2 = QHBoxLayout(self.scroll_area_widget_contents)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.horizontalLayout_2.setSizeConstraint(QLayout.SetMaximumSize)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.label = QLabel(self.scroll_area_widget_contents)
        self.label.setObjectName(u"label")
        sizePolicy2 = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy2.setHorizontalStretch(20)
        sizePolicy2.setVerticalStretch(20)
        sizePolicy2.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy2)
        self.label.setMouseTracking(False)
        self.label.setFocusPolicy(Qt.NoFocus)
        self.label.setLayoutDirection(Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setFrameShape(QFrame.NoFrame)
        self.label.setFrameShadow(QFrame.Plain)
        self.label.setLineWidth(0)
        self.label.setMidLineWidth(0)
        self.label.setTextFormat(Qt.PlainText)
        self.label.setPixmap(QPixmap(u":/icons/pynocchio_icon.png"))
        self.label.setScaledContents(False)
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setMargin(0)
        self.label.setTextInteractionFlags(Qt.NoTextInteraction)

        self.horizontalLayout_2.addWidget(self.label)

        self.qscroll_area_viewer.setWidget(self.scroll_area_widget_contents)

        self.horizontalLayout.addWidget(self.qscroll_area_viewer)

        MainWindowView.setCentralWidget(self.central_widget)
        self.menubar = QMenuBar(MainWindowView)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1048, 23))
        sizePolicy3 = QSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.menubar.sizePolicy().hasHeightForWidth())
        self.menubar.setSizePolicy(sizePolicy3)
        self.menubar.setAcceptDrops(False)
        self.menubar.setAutoFillBackground(False)
        self.menubar.setDefaultUp(False)
        self.menu_file = QMenu(self.menubar)
        self.menu_file.setObjectName(u"menu_file")
        self.menu_recent_files = QMenu(self.menu_file)
        self.menu_recent_files.setObjectName(u"menu_recent_files")
        self.menu_recent_files.setEnabled(True)
        self.menu_recent_files.setTearOffEnabled(False)
        self.menu_recent_files.setSeparatorsCollapsible(False)
        self.menu_view = QMenu(self.menubar)
        self.menu_view.setObjectName(u"menu_view")
        self.menu_navigation = QMenu(self.menubar)
        self.menu_navigation.setObjectName(u"menu_navigation")
        self.menu_navigation.setAcceptDrops(False)
        self.menu_navigation.setTearOffEnabled(False)
        self.menu_help = QMenu(self.menubar)
        self.menu_help.setObjectName(u"menu_help")
        self.menu_settings = QMenu(self.menubar)
        self.menu_settings.setObjectName(u"menu_settings")
        self.menu_bookmarks = QMenu(self.menubar)
        self.menu_bookmarks.setObjectName(u"menu_bookmarks")
        self.menu_bookmarks.setTearOffEnabled(False)
        self.menu_bookmarks.setSeparatorsCollapsible(True)
        self.menu_recent_bookmarks = QMenu(self.menu_bookmarks)
        self.menu_recent_bookmarks.setObjectName(u"menu_recent_bookmarks")
        MainWindowView.setMenuBar(self.menubar)
        self.toolbar = QToolBar(MainWindowView)
        self.toolbar.setObjectName(u"toolbar")
        self.toolbar.setEnabled(True)
        sizePolicy4 = QSizePolicy(QSizePolicy.Policy.Maximum, QSizePolicy.Policy.Maximum)
        sizePolicy4.setHorizontalStretch(0)
        sizePolicy4.setVerticalStretch(0)
        sizePolicy4.setHeightForWidth(self.toolbar.sizePolicy().hasHeightForWidth())
        self.toolbar.setSizePolicy(sizePolicy4)
        self.toolbar.setFocusPolicy(Qt.ClickFocus)
        self.toolbar.setAcceptDrops(True)
        self.toolbar.setAutoFillBackground(False)
        self.toolbar.setMovable(False)
        self.toolbar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        self.toolbar.setFloatable(False)
        MainWindowView.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolbar)
        self.statusbar = StatusBar(MainWindowView)
        self.statusbar.setObjectName(u"statusbar")
        MainWindowView.setStatusBar(self.statusbar)
        self.menu_context = QMenu(MainWindowView)
        self.menu_context.setObjectName(u"menu_context")
        self.menu_context.setEnabled(True)
        MainWindowView.setCentralWidget(self.menu_context)

        MainWindowView.addAction(self.action_next_page)
        MainWindowView.addAction(self.action_previous_page)
        MainWindowView.addAction(self.action_first_page)
        MainWindowView.addAction(self.action_last_page)
        MainWindowView.addAction(self.action_go_to_page)
        MainWindowView.addAction(self.action_next_comic)
        MainWindowView.addAction(self.action_previous_comic)
        MainWindowView.addAction(self.action_go_to_page)
        MainWindowView.addAction(self.action_page_fit)
        MainWindowView.addAction(self.action_original_fit)
        MainWindowView.addAction(self.action_vertical_fit)
        MainWindowView.addAction(self.action_horizontal_fit)
        MainWindowView.addAction(self.action_best_fit)
        MainWindowView.addAction(self.action_rotate_left)
        MainWindowView.addAction(self.action_rotate_right)
        MainWindowView.addAction(self.action_fullscreen)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_view.menuAction())
        self.menubar.addAction(self.menu_navigation.menuAction())
        self.menubar.addAction(self.menu_bookmarks.menuAction())
        self.menubar.addAction(self.menu_settings.menuAction())
        self.menubar.addAction(self.menu_help.menuAction())
        self.menu_file.addAction(self.action_open_file)
        self.menu_file.addAction(self.menu_recent_files.menuAction())
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_save_image)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_exit)
        self.menu_recent_files.addAction(self.actionRecent_file_1)
        self.menu_recent_files.addAction(self.actionRecent_file_2)
        self.menu_recent_files.addAction(self.actionRecent_file_3)
        self.menu_recent_files.addAction(self.actionRecent_file_4)
        self.menu_recent_files.addAction(self.actionRecent_file_5)
        self.menu_recent_files.addAction(self.actionRecent_file_6)
        self.menu_recent_files.addAction(self.actionRecent_file_7)
        self.menu_recent_files.addAction(self.actionRecent_file_8)
        self.menu_recent_files.addAction(self.actionRecent_file_9)
        self.menu_recent_files.addAction(self.actionRecent_file_10)
        self.menu_view.addAction(self.action_fullscreen)
        self.menu_view.addSeparator()
        self.menu_view.addAction(self.action_page_fit)
        self.menu_view.addAction(self.action_original_fit)
        self.menu_view.addAction(self.action_vertical_fit)
        self.menu_view.addAction(self.action_horizontal_fit)
        self.menu_view.addAction(self.action_best_fit)
        self.menu_view.addSeparator()
        self.menu_view.addAction(self.action_rotate_left)
        self.menu_view.addAction(self.action_rotate_right)
        self.menu_view.addSeparator()
        self.menu_view.addAction(self.action_double_page_mode)
        self.menu_view.addAction(self.action_manga_mode)
        self.menu_navigation.addAction(self.action_next_page)
        self.menu_navigation.addAction(self.action_previous_page)
        self.menu_navigation.addSeparator()
        self.menu_navigation.addAction(self.action_first_page)
        self.menu_navigation.addAction(self.action_last_page)
        self.menu_navigation.addSeparator()
        self.menu_navigation.addAction(self.action_go_to_page)
        self.menu_navigation.addSeparator()
        self.menu_navigation.addAction(self.action_next_comic)
        self.menu_navigation.addAction(self.action_previous_comic)
        self.menu_help.addAction(self.action_about)
        self.menu_help.addAction(self.action_about_qt)
        self.menu_settings.addAction(self.action_show_toolbar)
        self.menu_settings.addAction(self.action_show_statusbar)
        self.menu_settings.addAction(self.action_show_thumbnails)
        self.menu_settings.addAction(self.action_shrink_only)
        self.menu_settings.addAction(self.action_page_across_files)
        self.menu_settings.addAction(self.action_dark_style)
        self.menu_settings.addSeparator()
        self.menu_settings.addAction(self.action_preference_dialog)
        self.menu_bookmarks.addAction(self.action_add_bookmark)
        self.menu_bookmarks.addAction(self.action_remove_bookmark)
        self.menu_bookmarks.addSeparator()
        self.menu_bookmarks.addAction(self.action_bookmark_manager)
        self.menu_bookmarks.addAction(self.menu_recent_bookmarks.menuAction())
        self.menu_recent_bookmarks.addAction(self.actionRecent_bookmark_1)
        self.menu_recent_bookmarks.addAction(self.actionRecent_bookmark_2)
        self.menu_recent_bookmarks.addAction(self.actionRecent_bookmark_3)
        self.menu_recent_bookmarks.addAction(self.actionRecent_bookmark_4)
        self.menu_recent_bookmarks.addAction(self.actionRecent_bookmark_5)
        self.toolbar.addAction(self.action_open_file)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_previous_comic)
        self.toolbar.addAction(self.action_first_page)
        self.toolbar.addAction(self.action_previous_page)
        self.toolbar.addAction(self.action_next_page)
        self.toolbar.addAction(self.action_last_page)
        self.toolbar.addAction(self.action_next_comic)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_go_to_page)
        self.toolbar.addAction(self.action_add_bookmark)
        self.toolbar.addAction(self.action_remove_bookmark)
        self.toolbar.addAction(self.action_bookmark_manager)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_rotate_left)
        self.toolbar.addAction(self.action_rotate_right)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_page_fit)
        self.toolbar.addAction(self.action_original_fit)
        self.toolbar.addAction(self.action_vertical_fit)
        self.toolbar.addAction(self.action_horizontal_fit)
        self.toolbar.addAction(self.action_best_fit)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_fullscreen)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_double_page_mode)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.action_exit)
        self.menu_context.addAction(self.action_go_to_page)
        self.menu_context.addSeparator()
        self.menu_context.addAction(self.action_rotate_left)
        self.menu_context.addAction(self.action_rotate_right)
        self.menu_context.addSeparator()
        self.menu_context.addAction(self.action_page_fit)
        self.menu_context.addAction(self.action_original_fit)
        self.menu_context.addAction(self.action_vertical_fit)
        self.menu_context.addAction(self.action_horizontal_fit)
        self.menu_context.addAction(self.action_best_fit)
        self.menu_context.addSeparator()
        self.menu_context.addAction(self.action_fullscreen)

        self.retranslateUi(MainWindowView)

        QMetaObject.connectSlotsByName(MainWindowView)
    # setupUi

    def retranslateUi(self, MainWindowView):
        MainWindowView.setWindowTitle(QCoreApplication.translate("MainWindowView", u"Pynocchio", None))
#if QT_CONFIG(accessibility)
        MainWindowView.setAccessibleName(QCoreApplication.translate("MainWindowView", u"Pynocchio", None))
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(accessibility)
        MainWindowView.setAccessibleDescription(QCoreApplication.translate("MainWindowView", u"The Best Comic Reader", None))
#endif // QT_CONFIG(accessibility)
        self.action_about.setText(QCoreApplication.translate("MainWindowView", u"&About Pynocchio", None))
        self.action_about_qt.setText(QCoreApplication.translate("MainWindowView", u"About &Qt", None))
        self.action_exit.setText(QCoreApplication.translate("MainWindowView", u"&Exit", None))
#if QT_CONFIG(shortcut)
        self.action_exit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.action_next_page.setText(QCoreApplication.translate("MainWindowView", u"&Next page", None))
#if QT_CONFIG(shortcut)
        self.action_next_page.setShortcut(QCoreApplication.translate("MainWindowView", u"Right", None))
#endif // QT_CONFIG(shortcut)
        self.action_previous_page.setText(QCoreApplication.translate("MainWindowView", u"&Previous page", None))
#if QT_CONFIG(shortcut)
        self.action_previous_page.setShortcut(QCoreApplication.translate("MainWindowView", u"Left", None))
#endif // QT_CONFIG(shortcut)
        self.action_first_page.setText(QCoreApplication.translate("MainWindowView", u"&First page", None))
#if QT_CONFIG(shortcut)
        self.action_first_page.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Left", None))
#endif // QT_CONFIG(shortcut)
        self.action_last_page.setText(QCoreApplication.translate("MainWindowView", u"&Last page", None))
#if QT_CONFIG(shortcut)
        self.action_last_page.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Right", None))
#endif // QT_CONFIG(shortcut)
        self.action_rotate_left.setText(QCoreApplication.translate("MainWindowView", u"&Rotate left", None))
#if QT_CONFIG(shortcut)
        self.action_rotate_left.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Shift+R", None))
#endif // QT_CONFIG(shortcut)
        self.action_rotate_right.setText(QCoreApplication.translate("MainWindowView", u"Rotat&e right", None))
#if QT_CONFIG(shortcut)
        self.action_rotate_right.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.action_horizontal_fit.setText(QCoreApplication.translate("MainWindowView", u"&Horizontal fit", None))
#if QT_CONFIG(shortcut)
        self.action_horizontal_fit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+K", None))
#endif // QT_CONFIG(shortcut)
        self.action_fullscreen.setText(QCoreApplication.translate("MainWindowView", u"&Fullscreen", None))
#if QT_CONFIG(shortcut)
        self.action_fullscreen.setShortcut(QCoreApplication.translate("MainWindowView", u"F", None))
#endif // QT_CONFIG(shortcut)
        self.action_go_to_page.setText(QCoreApplication.translate("MainWindowView", u"&Go to page", None))
#if QT_CONFIG(shortcut)
        self.action_go_to_page.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.action_original_fit.setText(QCoreApplication.translate("MainWindowView", u"&Original fit", None))
#if QT_CONFIG(shortcut)
        self.action_original_fit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.action_show_statusbar.setText(QCoreApplication.translate("MainWindowView", u"S&how statusbar", None))
        self.action_add_bookmark.setText(QCoreApplication.translate("MainWindowView", u"&Add bookmark", None))
        self.action_remove_bookmark.setText(QCoreApplication.translate("MainWindowView", u"&Remove bookmark", None))
        self.action_bookmark_manager.setText(QCoreApplication.translate("MainWindowView", u"&Bookmark manager", None))
        self.action_open_folder.setText(QCoreApplication.translate("MainWindowView", u"Open &Folder", None))
        self.action_next_comic.setText(QCoreApplication.translate("MainWindowView", u"Next &Comic", None))
#if QT_CONFIG(shortcut)
        self.action_next_comic.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Shift+Right", None))
#endif // QT_CONFIG(shortcut)
        self.action_previous_comic.setText(QCoreApplication.translate("MainWindowView", u"P&revious Comic", None))
#if QT_CONFIG(shortcut)
        self.action_previous_comic.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+Shift+Left", None))
#endif // QT_CONFIG(shortcut)
        self.action_preference_dialog.setText(QCoreApplication.translate("MainWindowView", u"&Preferences", None))
        self.action_vertical_fit.setText(QCoreApplication.translate("MainWindowView", u"&Vertical fit", None))
#if QT_CONFIG(shortcut)
        self.action_vertical_fit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+J", None))
#endif // QT_CONFIG(shortcut)
        self.action_best_fit.setText(QCoreApplication.translate("MainWindowView", u"&Best fit", None))
#if QT_CONFIG(shortcut)
        self.action_best_fit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.action_page_fit.setText(QCoreApplication.translate("MainWindowView", u"&Page fit", None))
#if QT_CONFIG(shortcut)
        self.action_page_fit.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.action_save_image.setText(QCoreApplication.translate("MainWindowView", u"&Save image", None))
#if QT_CONFIG(whatsthis)
        self.action_save_image.setWhatsThis(QCoreApplication.translate("MainWindowView", u"Save current image in disk", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(shortcut)
        self.action_save_image.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.action_open_file.setText(QCoreApplication.translate("MainWindowView", u"&Open File", None))
#if QT_CONFIG(shortcut)
        self.action_open_file.setShortcut(QCoreApplication.translate("MainWindowView", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.action_show_toolbar.setText(QCoreApplication.translate("MainWindowView", u"&Show toolbar", None))
        self.action_double_page_mode.setText(QCoreApplication.translate("MainWindowView", u"&Double Page Mode", None))
#if QT_CONFIG(tooltip)
        self.action_double_page_mode.setToolTip(QCoreApplication.translate("MainWindowView", u"Enable double page mode", None))
#endif // QT_CONFIG(tooltip)
        self.action_manga_mode.setText(QCoreApplication.translate("MainWindowView", u"&Manga Mode", None))
        self.action_page_across_files.setText(QCoreApplication.translate("MainWindowView", u"&Page across files", None))
        self.action_show_thumbnails.setText(QCoreApplication.translate("MainWindowView", u"Show &thumbnails", None))
        self.action_dark_style.setText(QCoreApplication.translate("MainWindowView", u"Force &dark style", None))
        self.action_shrink_only.setText(QCoreApplication.translate("MainWindowView", u"Shrink &only", None))
        self.label.setText("")
        self.menu_file.setTitle(QCoreApplication.translate("MainWindowView", u"&File", None))
        self.menu_recent_files.setTitle(QCoreApplication.translate("MainWindowView", u"&Recent files", None))
        self.menu_view.setTitle(QCoreApplication.translate("MainWindowView", u"&View", None))
        self.menu_navigation.setTitle(QCoreApplication.translate("MainWindowView", u"&Navigation", None))
        self.menu_help.setTitle(QCoreApplication.translate("MainWindowView", u"&Help", None))
        self.menu_settings.setTitle(QCoreApplication.translate("MainWindowView", u"&Settings", None))
        self.menu_bookmarks.setTitle(QCoreApplication.translate("MainWindowView", u"&Bookmarks", None))
        self.menu_recent_bookmarks.setTitle(QCoreApplication.translate("MainWindowView", u"R&ecent bookmarks", None))
        self.toolbar.setWindowTitle(QCoreApplication.translate("MainWindowView", u"toolbar", None))
    # retranslateUi

